import java.util.logging.Logger;

/**
 * Enum класс предназначен для хранения всех исключений(текста и кода), которые могут генерироваться
 * сервисом
 * @author Maksimov Roman
 * @version 1.0.2
 */
public enum Exept {
    E1("Недопустимая операция - деление на ноль.", "001"),
    E2("Недопустимая операция - корень отрицательного числа.", "002"),
    E3("Ошибка передачи операции вычисления", "003"),
    E4("Результат умножения больше центилиона, выходит за пределы верхней границы диапазона.", "004"),
    E5("Первое чило слишком маленькое для проведения операций отнимания и прибавления. ","005"),
    E6("Второе число выходит за нижнюю границу диапазона. Попробуйте числа побольше.", "006"),
    E7("Введены не коректные данные. Проверьте пожалуйста коректность ввода.", "007"),
    E8("Критическая ошибка парсинга Xml", "008"),
    E9("Результат деления слишком большое число, выходящее за допустимые пределы. Попробуйте поработать с числами меньше чем атомов Вселенной.","009"),
    E10("Результат деления слишком маленькое число, выходящее за допустимые пределы. Попробуйте поработать с большими числами.", "010"),
    E11("Результат умножения слишком малое число, выходящее за пределы диапазона точного подсчета.", "011"),
    E12("Первое число значительно больше(по модулю) чем Гугол(десять в сотой степени). Попробуйте прибавлять/отнимать числа поменьше.", "012"),
    E13("Второе число слишком большое. Выходит за допустимый диапазон.", "013") ;


    private String message;
    private String cod;
    /** Конструктор класса
     * @param message - текст исключения
     * @param cod - код исключения
    */
    Exept(String message, String cod){
        this.message=message;
        this.cod=cod;
    }
    /** Метод возвращающий текст исключения
    */
    public String getMessage() {
        return message;
    }
    /** Метод возвращающий код исключения
     */
    public String getCod() {
        return cod;
    }
}
